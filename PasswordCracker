import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class PasswordCracker {
	
	public static void main(String[] args) throws IOException{
//		
		//First, read in .txt file for username/password that has the provided username:(hashed password)
		
		//Second, read in the dictionary .txt
		
		//Third, use the hash method in the homework to hash dictionary .txt file
		
		//Fourth, Use two arrays to store the hashed password (given in assignment) and hashed dictionary word
		
		//Fifth, Make sure that you have 3 arrays: one with user names, another with hashed passwords, and one with hashed dictionary words 
		
				//make sure that userNameArray[0] corresponds with hashedPasswordArray[0]
				//for example, if root = #1234 in .txt, make sure that 'root' is in the userNameArray[0] and the #1234 is in the hashedPasswordArray[0]
		
		//Sixth, Compare the hashed passwords with the now-hashed dictionary words (Google String comparison)
		
		//Finally, Output the matching strings. 
		
				//In other words, make a loop where, if the hashed password #1234 = hashed dictionary word #1234
				//then, the result will say 'match found' and will tell you what the hashed password is to the corresponding dictionary word
		
				//this reads in the inputFile.txt
		        Scanner s = null;

		        try {
		            s = new Scanner(new BufferedReader(new FileReader("inputFile.txt")));

		            while (s.hasNext()) {
		                System.out.print(s.next());		            
		            }
		        } finally {
		            if (s != null) {
		                s.close();
		            }
		            
		        }
		    
		        //this method reads in the mini_american text file
		        Scanner t = null;

		        try {
		        	t = new Scanner(new BufferedReader(new FileReader("mini_american.txt")));

		        	while (t.hasNext()) {
		        		System.out.println(t.next());
		        	}
		        } finally {
		        	if (t != null) {
		        		t.close();
		        	}
		        }
	}

		//this method is to store the inputFile into and array
	
//	FileInputStream in = new FileInputStream("file.txt");
//    BufferedReader br = new BufferedReader(new InputStreamReader(in));
//
//    String strLine;
//    String[] filearray;
//    filearray = new String[10];
//
//    while ((strLine = br.readLine()) != null) {
//
//    	for (int j = 0; j < myarray.length; j++){
//    		filearray[j] = br.readLine();
//    	}
//
//    }
//    in.close();
    
		
		//Below, a sample string is created
//		String name = "atherogenesis";
//		//Message digest will be the class used for the conversion
//		try{
//			MessageDigest md = MessageDigest.getInstance("MD5");
//			//update md object
//			md.update(name.getBytes(), 0, name.length());
//			//this will output the MD5 equivalent
//			System.out.println(new BigInteger(1, md.digest()).toString(16));
//		} catch (NoSuchAlgorithmException e) {
//			e.printStackTrace();
//		}
//
//	}
	
	public static Integer[] loadFromFile(String anotherFile){
		Integer[] arr=new Integer[0];
		

		File file = new File(anotherFile);
		List<String> myList = new ArrayList<String>();
		String[] t = myList.toArray(new String[myList.size()]);
		int count = 0;

		try {
			Scanner scanner = new Scanner(file);
			while (scanner.hasNextLine()) {
				String line= new String();
				if(count==0){
					 int lineLength = Integer.parseInt(scanner.nextLine());
					 count++;
				}else{
			    line = scanner.nextLine();
				t = line.split(",");
			

				}
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();	
		}
		arr= new Integer[t.length];                                      
		for(int i = 0; i < t.length; i++)
		{
			arr[i] = Integer.parseInt(t[i]);
			

		}
		return arr;
	}
	
	/**
	 * Computes the MD5 hash of the given string s */
	public static String md5(String s) {

		StringBuilder sb = new StringBuilder (); 

		try {
			byte[] bytesOfMessage = s.getBytes("UTF-8"); 
			
			MessageDigest md = MessageDigest.getInstance("MD5"); byte[] digest = md.digest(bytesOfMessage);

			for(byte b : digest) {

				sb.append(String.format("%02x", b)); }

		} catch(Exception e) {

			throw new RuntimeException(e);

		}

		return sb.toString(); 
		
	}
}




